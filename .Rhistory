library(lpSolveAPI)
prob1 = make.lp(0,2)
#set objective direction
add.constraint(prob1,c(-10,20), "<=",22)
add.constraint(prob1,c(5,10), "<=",49)
add.constraint(prob1,c(1,0), "<=",5)
#set objective coefficients
set.objfn(prob1, c(-1,4))
RowNames = c("C1", "C2","C3")
ColNames = c("X1", "X2")
dimnames(prob1) = list(RowNames, ColNames)
set.type(prob1, c(1,2), type = c("integer", "integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob1,sense='max')
solve(prob1)
#this return the proposed solution
get.objective(prob1)
get.variables(prob1)
library(lpSolveAPI)
prob1 = make.lp(0,2)
#set objective direction
add.constraint(prob1,c(-10,20), "<=",22)
add.constraint(prob1,c(5,10), "<=",49)
add.constraint(prob1,c(1,0), "<=",5)
#set objective coefficients
set.objfn(prob1, c(-1,4))
RowNames = c("C1", "C2","C3")
ColNames = c("X1", "X2")
dimnames(prob1) = list(RowNames, ColNames)
set.type(prob1, c(0,1), type = c("integer", "integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob1,sense='max')
solve(prob1)
#this return the proposed solution
get.objective(prob1)
get.variables(prob1)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
library(lpsolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
library(lpsolve)
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
library("lpSolveAPI", lib.loc="D:/R/R-3.2.1/library")
detach("package:lpSolveAPI", unload=TRUE)
library(lpSolve)
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs, int.vec(1,2))$solution
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs, int.vec=c(1,2))$solution
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs, int.vec=c(1,2))$solution
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
lp("max", f.obj, f.con, f.dir, f.rhs)$obj
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
lp("max", f.obj, f.con, f.dir, f.rhs)$objective
library(lpSolveAPI)
prob1 = make.lp(0,2)
#set objective direction
add.constraint(prob1,c(-10,20), "<=",22)
add.constraint(prob1,c(5,10), "<=",49)
add.constraint(prob1,c(1,0), "<=",5)
#set objective coefficients
set.objfn(prob1, c(-1,4))
RowNames = c("C1", "C2","C3")
ColNames = c("X1", "X2")
dimnames(prob1) = list(RowNames, ColNames)
set.type(prob1, c(0,1), type = c("integer", "integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob1,sense='max')
solve(prob1)
#this return the proposed solution
get.objective(prob1)
get.variables(prob1)
library(lpSolveAPI)
prob1 = make.lp(0,2)
#set objective direction
add.constraint(prob1,c(-10,20), "<=",22)
add.constraint(prob1,c(5,10), "<=",49)
add.constraint(prob1,c(1,0), "<=",5)
#set objective coefficients
set.objfn(prob1, c(-1,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
RowNames = c("C1", "C2","C3")
ColNames = c("X1", "X2")
dimnames(prob1) = list(RowNames, ColNames)
set.type(prob1, c(1,1), type = c("integer", "integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob1,sense='max')
solve(prob1)
#this return the proposed solution
get.objective(prob1)
get.variables(prob1)
library(lpSolveAPI)
prob1 = make.lp(0,2)
#set objective direction
add.constraint(prob1,c(-10,20), "<=",22)
add.constraint(prob1,c(5,10), "<=",49)
add.constraint(prob1,c(1,0), "<=",5)
#set objective coefficients
set.objfn(prob1, c(-1,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
RowNames = c("C1", "C2","C3")
ColNames = c("X1", "X2")
dimnames(prob1) = list(RowNames, ColNames)
set.type(prob1, c(1,1), type = c("integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob1,sense='max')
solve(prob1)
#this return the proposed solution
get.objective(prob1)
get.variables(prob1)
library(lpSolveAPI)
prob1 = make.lp(0,2)
#set objective direction
add.constraint(prob1,c(-10,20), "<=",22)
add.constraint(prob1,c(5,10), "<=",49)
add.constraint(prob1,c(1,0), "<=",5)
#set objective coefficients
set.objfn(prob1, c(-1,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
RowNames = c("C1", "C2","C3")
ColNames = c("X1", "X2")
dimnames(prob1) = list(RowNames, ColNames)
set.type(prob1, c(1,1), type = c("integer","integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob1,sense='max')
solve(prob1)
#this return the proposed solution
get.objective(prob1)
get.variables(prob1)
library(lpSolveAPI)
prob1 = make.lp(0,2)
#set objective direction
add.constraint(prob1,c(-10,20), "<=",22)
add.constraint(prob1,c(5,10), "<=",49)
add.constraint(prob1,c(1,0), "<=",5)
#set objective coefficients
set.objfn(prob1, c(-1,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
RowNames = c("C1", "C2","C3")
ColNames = c("X1", "X2")
dimnames(prob1) = list(RowNames, ColNames)
set.type(prob1, c(1,2), type = c("integer","integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob1,sense='max')
solve(prob1)
#this return the proposed solution
get.objective(prob1)
get.variables(prob1)
library(lpSolveAPI)
prob1 = make.lp(0,2)
#set objective direction
add.constraint(prob1,c(-10,20), "<=",22)
add.constraint(prob1,c(5,10), "<=",49)
add.constraint(prob1,c(1,0), "<=",5)
#set objective coefficients
set.objfn(prob1, c(-1,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
RowNames = c("C1", "C2","C3")
ColNames = c("X1", "X2")
dimnames(prob1) = list(RowNames, ColNames)
set.type(prob1, c(1,2), type = c("integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob1,sense='max')
solve(prob1)
#this return the proposed solution
get.objective(prob1)
get.variables(prob1)
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
library(lpSolve)
f.obj = c(-1,4)
f.con = matrix(c(-10,20,5,10,1,0), nrow=3, byrow=TRUE)
f.dir = c("<=", "<=","<=")
f.rhs = c(22, 49, 5)
lp("max", f.obj, f.con, f.dir, f.rhs, int.vec=c(1,2))$solution
curve(-10*x+20*y, type="l",xlab = "x", ylab="y")
curve(2*x-2.2, type="l",xlab = "x", ylab="y")
curve(2*x-2.2, type="l",xlab = "x2", ylab="x1")
par(new=TRUE)
curve(-2*x+49/5, type="l",xlab = "x2", ylab="x1")
curve(2*x-2.2, type="l",xlab = "x2", ylab="x1", ylim=c(0,10))
par(new=TRUE)
curve(-2*x+49/5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10))
curve(2*x-2.2, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,50))
par(new=TRUE)
curve(-2*x+49/5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,50))
curve(2*x-2.2, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
par(new=TRUE)
curve(-2*x+49/5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
```{r}
curve(2*x-2.2, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
par(new=TRUE)
curve(-2*x+49/5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
par(new=TRUE)
curve(5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
A = array(c(3,2,6,5), c(2,2))
b = c(3,2)
solve(A,b)
```
```{r}
curve(2*x-2.2, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
par(new=TRUE)
curve(-2*x+49/5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
par(new=TRUE)
curve(0*x+5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
A = array(c(3,2,6,5), c(2,2))
b = c(3,2)
solve(A,b)
```
curve(2*x-2.2, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
curve(2*x-2.2, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
par(new=TRUE)
curve(-2*x+49/5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
par(new=TRUE)
curve(0*x+5, type="l",xlab = "x2", ylab="x1", ylim=c(0,10), xlim=c(0,10))
library(lpSolveAPI)
prob2 = make.lp(0,4)
#set objective direction
add.constraint(prob2,c(6,3,4,2), "<=",11)
add.constraint(prob2,c(1,0,0,0), "<=",1)
add.constraint(prob2,c(0,1,0,0), "<=",1)
add.constraint(prob2,c(0,0,1,0), "<=",1)
add.constraint(prob2,c(0,0,0,1), "<=",1)
add.constraint(prob2,c(1,1,0,0), "<=",1)
add.constraint(prob2,c(0,0,1,1), "<=",1)
#set objective coefficients
set.objfn(prob2, c(9,5,6,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
ColNames = c("Aus.Fac", "Dal.Fac", "Aus.WH", "Dal.WH")
dimnames(prob2) = list(ColNames)
set.type(prob2, c(1,2,3,4), type = c("integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob2,sense='max')
solve(prob2)
#this return the proposed solution
get.objective(prob2)
get.variables(prob2)
prob2
library(lpSolveAPI)
prob2 = make.lp(0,4)
#set objective direction
add.constraint(prob2,c(6,3,4,2), "<=",11)
add.constraint(prob2,c(1,0,0,0), "<=",1)
add.constraint(prob2,c(0,1,0,0), "<=",1)
add.constraint(prob2,c(0,0,1,0), "<=",1)
add.constraint(prob2,c(0,0,0,1), "<=",1)
add.constraint(prob2,c(1,1,0,0), "<=",1)
add.constraint(prob2,c(0,0,1,1), "<=",1)
#set objective coefficients
set.objfn(prob2, c(9,5,6,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
ColNames = c("Aus.Fac", "Dal.Fac", "Aus.WH", "Dal.WH")
dimnames(prob2) = list(ColNames)
set.type(prob2, c(1,2,3,4), type = c("integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob2,sense='max')
solve(prob2)
#this return the proposed solution
get.objective(prob2)
get.variables(prob2)
prob2
library(lpSolveAPI)
prob2 = make.lp(0,4)
#set objective direction
add.constraint(prob2,c(6,3,4,2), "<=",11)
add.constraint(prob2,c(1,0,0,0), "<=",1)
add.constraint(prob2,c(0,1,0,0), "<=",1)
add.constraint(prob2,c(0,0,1,0), "<=",1)
add.constraint(prob2,c(0,0,0,1), "<=",1)
add.constraint(prob2,c(1,1,0,0), "<=",1)
add.constraint(prob2,c(0,0,1,1), "<=",1)
#set objective coefficients
set.objfn(prob2, c(9,5,6,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
RowNames = c("1", "2", "3", "4", "5", "6", "7")
ColNames = c("Aus.Fac", "Dal.Fac", "Aus.WH", "Dal.WH")
dimnames(prob2) = list(ColNames)
set.type(prob2, c(1,2,3,4), type = c("integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob2,sense='max')
solve(prob2)
#this return the proposed solution
get.objective(prob2)
get.variables(prob2)
prob2
library(lpSolveAPI)
prob2 = make.lp(0,4)
#set objective direction
add.constraint(prob2,c(6,3,4,2), "<=",11)
add.constraint(prob2,c(1,0,0,0), "<=",1)
add.constraint(prob2,c(0,1,0,0), "<=",1)
add.constraint(prob2,c(0,0,1,0), "<=",1)
add.constraint(prob2,c(0,0,0,1), "<=",1)
add.constraint(prob2,c(1,1,0,0), "<=",1)
add.constraint(prob2,c(0,0,1,1), "<=",1)
#set objective coefficients
set.objfn(prob2, c(9,5,6,4))
lp("max", f.obj, f.con, f.dir, f.rhs)$solution
RowNames = c("1", "2", "3", "4", "5", "6", "7")
ColNames = c("Aus.Fac", "Dal.Fac", "Aus.WH", "Dal.WH")
dimnames(prob2) = list(RowNames,ColNames)
set.type(prob2, c(1,2,3,4), type = c("integer"))
#solve the model, if this return 0 an optimal solution is found
lp.control(prob2,sense='max')
solve(prob2)
#this return the proposed solution
get.objective(prob2)
get.variables(prob2)
prob2
library(ggplot2)
library(reshape2)
library(stringr)
df = read.table(file='Dominicks_scanner_data-orange_juice.txt', header=TRUE, sep='\t')
summary(df[2:6])
summary(df[7:11])
xlabs = c("Tropicana Premium 64oz", "Tropicana Premium 96oz",
"Tropicana 64 oz", "Minute Maid 64 oz","Dominick’s 64 oz")
sales_lf = stack(df, select=c(sales1, sales2, sales3, sales4, sales5))
colnames(sales_lf) = c("Sales","Brand")
p1 = ggplot(sales_lf, aes(y=Sales, x=Brand))+
geom_violin(aes(fill = factor(Brand)))+
scale_x_discrete(breaks=c("sales1", "sales2", "sales3", "sales4", "sales5"),
labels=str_wrap(xlabs, width = 10))+
theme(legend.position = "none") +
geom_boxplot(width=.08)
p1
price_lf = stack(df, select=c(price1, price2, price3, price4, price5))
colnames(price_lf) = c("Price","Brand")
p2 = ggplot(price_lf, aes(y=Price, x=Brand))+
geom_violin(aes(fill = factor(Brand)))+
scale_x_discrete(breaks=c("price1", "price2", "price3", "price4", "price5"),
labels=str_wrap(xlabs, width = 10))+
theme(legend.position = "none") +
geom_boxplot(width=.08)
p2
ms1 = sum(df$sales1*df$price1)/sum(df[2:6]*df[7:11])
ms2 = sum(df$sales2*df$price2)/sum(df[2:6]*df[7:11])
ms3 = sum(df$sales3*df$price3)/sum(df[2:6]*df[7:11])
ms4 = sum(df$sales4*df$price4)/sum(df[2:6]*df[7:11])
ms5 = sum(df$sales5*df$price5)/sum(df[2:6]*df[7:11])
View(price_lf)
library(ggplot2)
library(reshape2)
library(stringr)
df = read.table(file='Dominicks_scanner_data-orange_juice.txt', header=TRUE, sep='\t')
summary(df[2:6])
setwd("D:/Dropbox/Coding/GitHub/MKT2")
library(ggplot2)
library(reshape2)
library(stringr)
df = read.table(file='Dominicks_scanner_data-orange_juice.txt', header=TRUE, sep='\t')
summary(df[2:6])
summary(df[7:11])
xlabs = c("Tropicana Premium 64oz", "Tropicana Premium 96oz",
"Tropicana 64 oz", "Minute Maid 64 oz","Dominick’s 64 oz")
sales_lf = stack(df, select=c(sales1, sales2, sales3, sales4, sales5))
colnames(sales_lf) = c("Sales","Brand")
p1 = ggplot(sales_lf, aes(y=Sales, x=Brand))+
geom_violin(aes(fill = factor(Brand)))+
scale_x_discrete(breaks=c("sales1", "sales2", "sales3", "sales4", "sales5"),
labels=str_wrap(xlabs, width = 10))+
theme(legend.position = "none") +
geom_boxplot(width=.08)
p1
price_lf = stack(df, select=c(price1, price2, price3, price4, price5))
colnames(price_lf) = c("Price","Brand")
p2 = ggplot(price_lf, aes(y=Price, x=Brand))+
geom_violin(aes(fill = factor(Brand)))+
scale_x_discrete(breaks=c("price1", "price2", "price3", "price4", "price5"),
labels=str_wrap(xlabs, width = 10))+
theme(legend.position = "none") +
geom_boxplot(width=.08)
p2
ms1 = sum(df$sales1*df$price1)/sum(df[2:6]*df[7:11])
ms2 = sum(df$sales2*df$price2)/sum(df[2:6]*df[7:11])
ms3 = sum(df$sales3*df$price3)/sum(df[2:6]*df[7:11])
ms4 = sum(df$sales4*df$price4)/sum(df[2:6]*df[7:11])
ms5 = sum(df$sales5*df$price5)/sum(df[2:6]*df[7:11])
View(df)
df_ll[2:11] = log(df_ll[2:11])
df_ll = df
df_ll[2:11] = log(df_ll[2:11])
View(df_ll)
View(df_ll)
df_ll = df
df_ll[2:11] = log(df_ll[2:11])
df_ll[, fl1:=c(NA, price1[-.N]), by=groups]
df_ll
View(df_ll)
View(df_ll)
df_ll = df
df_ll[2:11] = log(df_ll[2:11])
df_ll[, fl1:=c(NA, price1[-.N])]
create_fl = function(x) {
for(i in length(x)) {
result[i] = i
}
return(result)
}
test = create_fl(df_ll$feat1)
create_fl = function(x) {
for(i in dim(x)) {
result[i] = i
}
return(result)
}
test = create_fl(df_ll$feat1)
create_fl = function(x) {
for(i in dim(x)) {
result(i) = i
}
return(result)
}
test = create_fl(df_ll$feat1)
create_fl = function(x) {
result = numeric(length(x))
for(i in dim(x)) {
result(i) = i
}
return(result)
}
test = create_fl(df_ll$feat1)
test
create_fl = function(x) {
k=length(x)
result = numeric(k)
for(i in k) {
result(i) = i
}
return(result)
}
test = create_fl(df_ll$feat1)
create_fl = function(x) {
k=length(x)
result = numeric(k)
for(i in 0:k) {
result(i) = i
}
return(result)
}
test = create_fl(df_ll$feat1)
create_fl = function(x) {
k=length(x)
result = numeric(k)
for(i in 0:k) {
result[i] = i
}
return(result)
}
test = create_fl(df_ll$feat1)
test
S1.lm = lm(sales1 ~ price1 + price2 + price3 + price4 + price5 + feat1 + disp1, data=df_ll)
summary(S1.lm)
S1.lm = lm(log(sales1) ~ log(price1) + log(price2) + log(price3) + log(price4) + log(price5) + feat1 + disp1, data=df_ll)
S1.lm = lm(log(sales1) ~ log(price1) + log(price2) + log(price3) + log(price4) + log(price5) + feat1 + disp1, data=df)
summary(S1.lm)
S1.lm = lm(log(sales1) ~ log(price1) + log(price2) + log(price3) + log(price4) + log(price5) + feat1 + disp1, data=df)
S2.lm = lm(log(sales2) ~ log(price1) + log(price2) + log(price3) + log(price4) + log(price5) + feat2 + disp2, data=df)
S3.lm = lm(log(sales3) ~ log(price1) + log(price2) + log(price3) + log(price4) + log(price5) + feat3 + disp3, data=df)
S4.lm = lm(log(sales4) ~ log(price1) + log(price2) + log(price3) + log(price4) + log(price5) + feat4 + disp4, data=df)
S5.lm = lm(log(sales5) ~ log(price1) + log(price2) + log(price3) + log(price4) + log(price5) + feat5 + disp5, data=df)
